
##	=======================================================================================
##	You work with the following files: adapter_01.py, adapter.py, adapter.comm, precice.pyx
##	SolverInterface.cpp, constants.pyx
##	=======================================================================================

DEBUT(PAR_LOT='NON');

from subprocess import call
import sys
adapter_root = os.getenv('ASTER_ADAPTER_ROOT')
sys.path.insert(0, adapter_root)
from adapter_01 import *

# Get participant name from environment variable
# Note: In the OpenFOAM and CalculiX adapters, this is read from a command line argument (--precice-participant),
#       but I don't know how to pass my own argument to as_run
participantName = os.environ["PRECICE_PARTICIPANT"]

# ==========================================================================================
# Include file in UNITE 90: PreCICE setup (config.comm)
# Note: config.comm creates a variable named "settings", which contains the same data
#       as the config.yml file; ideally, all participants should read the same .yml file,
#       but for some reason, calling "import yaml" inside the current file causes an
#       floating point exception in Code_Aster, and therefore the .yml file cannot be read!
# ==========================================================================================

# Include adapter configuration .comm.
# Defines: preciceConfigFile, interfaces, participantName
INCLUDE(UNITE=90)
preciceConfigFile = settings["base-path"] + "/" + settings["precice-config-file"]
participant = settings["participants"][participantName]
isSteadyState = ("steady-state" in settings["simulation"]) and (settings["simulation"]["steady-state"])

# ==========================================================================================
# Include file in UNITE 91: Setup Aster case
# ==========================================================================================

# Include case definition.comm. (def.comm)
# Defines: MESH, MODEL, BC[], MAT[], MATS
INCLUDE(UNITE=91)
                         
# ==========================================================================================
# Create and initialize the adapter
# ==========================================================================================

solverName = ""			##	CHANGE THIS TO PROPER NAMING
configFileName = "" 	## 	CHANGE TO ARG PARSER, OR PROPER PATH

adapter = Adapter(preciceConfigFile,
                  participantName,
                  participant["interfaces"],
                  MESH, MODEL, MAT,
                  isNonLinear=participant["non-linear"])
BCs = [{'CHARGE': bc} for bc in BC]
LOADS = BCs + adapter.LOADS

dt = adapter.initialize(INIT_T)

# ==========================================================================================
# ==========================================================================================
#                                         SOLUTION LOOP
# ==========================================================================================
# ==========================================================================================

k = 0
time = 0.0
ICOND = {'CHAM_NO': INIT_T}

while adapter.isCouplingOngoing():

    adapter.writeCheckpoint()
    adapter.readCouplingData()
    
    # ======================================================================================
    # Solve
    # ======================================================================================
    
    if isSteadyState:
        
        if participant["non-linear"]:
            TEMP = THER_NON_LINE(
                MODELE=MODEL,
                CHAM_MATER=MATS,
                EXCIT=LOADS,
                ETAT_INIT=_F(STATIONNAIRE='OUI'),
            )
        else:
            TEMP = THER_LINEAIRE(
                MODELE=MODEL,
                CHAM_MATER=MATS,
                EXCIT=LOADS,
                ETAT_INIT=_F(STATIONNAIRE='OUI'),
            )

        T = CREA_CHAMP(
            RESULTAT=TEMP,
            NOM_CHAM='TEMP',
            TYPE_CHAM='NOEU_TEMP_R',
            OPERATION='EXTR'
        )

    else:
    
        STEP = DEFI_LIST_REEL(
            DEBUT=time,
            INTERVALLE=(_F(JUSQU_A=time+dt, NOMBRE=1))
        )
        
        if participant["non-linear"]:
            TEMP = THER_NON_LINE(
                MODELE=MODEL,
                CHAM_MATER=MATS,
                EXCIT=LOADS,
                ETAT_INIT=ICOND,
                INCREMENT=_F(LIST_INST=STEP),
                PARM_THETA=1.0
            )
        else:
            TEMP = THER_LINEAIRE(
                MODELE=MODEL,
                CHAM_MATER=MATS,
                EXCIT=LOADS,
                ETAT_INIT=ICOND,
                INCREMENT=_F(LIST_INST=STEP),
                PARM_THETA=1.0
            )

        T = CREA_CHAMP(
            RESULTAT=TEMP,
            NOM_CHAM='TEMP',
            TYPE_CHAM='NOEU_TEMP_R',
            OPERATION='EXTR',
            NUME_ORDRE=1,
        )

    adapter.writeCouplingData(T)
    dt = adapter.advance()
    adapter.readCheckpoint()

    if adapter.isCouplingTimestepComplete():

        # Output if necessary
        k += 1
        if k % settings["simulation"]["output-frequency"] == 0:
               filename = "output-" + str(k) + ".rmed"
               DEFI_FICHIER(FICHIER=filename, UNITE=80)
               IMPR_RESU(FORMAT='MED', RESU=_F(RESULTAT=TEMP))
               call(["mv", filename, settings["base-path"] + "/" + participant["directory"]])
               DEFI_FICHIER(ACTION='LIBERER', UNITE=80)

        # Use current solution as initial condition for the next time step
        if time > 0:
            DETRUIRE(CONCEPT=_F(NOM=TEMP_CPY))
        TEMP_CPY = COPIER(CONCEPT=TEMP)
        ICOND = {'EVOL_THER': TEMP_CPY}
        time = time + dt

    # ======================================================================================
    # Destroy Aster objects
    # ======================================================================================

    DETRUIRE(CONCEPT=_F(NOM=TEMP))
    DETRUIRE(CONCEPT=_F(NOM=T))
    
    if not isSteadyState:
        DETRUIRE(CONCEPT=_F(NOM=STEP))

adapter.finalize()

FIN()
